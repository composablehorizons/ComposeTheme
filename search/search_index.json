{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>An unstyled Composable component for Compose Multiplatform that can be used to implement Dropdown Menus with the styling of your choice. Fully accessible, supports keyboard navigation and open/close animations.</p> <p>Available for Compose Desktop, Compose Web (Js/WASM), Jetpack Compose (Android) and iOS.</p>"},{"location":"#installation","title":"Installation","text":"build.gradle.kts<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation(\"com.composables.ui:menu:1.4.0\")\n}\n</code></pre>"},{"location":"#basic-example","title":"Basic Example","text":"<p>There are four components that you will use to implement a dropdown: <code>Menu</code>, <code>MenuButton</code>, <code>MenuContent</code> and <code>MenuItem</code>.</p> <p>The <code>Menu</code> wraps the <code>MenuButton</code> and the <code>MenuContent</code> components. When the <code>MenuButton</code> is clicked, the <code>MenuContent</code> will be displayed on the screen at the position relative to the <code>Menu</code>.</p> <p>The <code>MenuContent</code> component wraps multiple <code>MenuItem</code>s. When a <code>MenuItem</code> is clicked, the menu is dismissed. Each <code>MenuItem</code> has a <code>onClick</code> parameter you can use for interaction purposes.</p> <p>The menu's dropdown visibility is handled for you thanks to the <code>Menu</code>'s internal state.</p> <pre><code>val options = listOf(\"United States\", \"Greece\", \"Indonesia\", \"United Kingdom\")\nvar selected by remember { mutableStateOf(0) }\n\nColumn(Modifier.fillMaxSize()) {\n    Menu(Modifier.align(Alignment.End)) {\n        MenuButton(Modifier.clip(RoundedCornerShape(6.dp)).border(1.dp, Color(0xFFBDBDBD), RoundedCornerShape(6.dp))) {\n            Row(\n                verticalAlignment = Alignment.CenterVertically,\n                modifier = Modifier.padding(horizontal = 14.dp, vertical = 10.dp)\n            ) {\n                BasicText(\"Options\", style = defaultTextStyle.copy(fontWeight = FontWeight(500)))\n                Spacer(Modifier.width(4.dp))\n                Image(ChevronDown, null)\n            }\n        }\n\n        MenuContent(\n            modifier = Modifier.width(320.dp).border(1.dp, Color(0xFFE0E0E0), RoundedCornerShape(4.dp))\n                .background(Color.White).padding(4.dp),\n            hideTransition = fadeOut()\n        ) {\n            options.forEachIndexed { index, option -&gt;\n                MenuItem(\n                    modifier = Modifier.clip(RoundedCornerShape(4.dp)),\n                    onClick = { selected = index }\n                ) {\n                    BasicText(option, modifier = Modifier.fillMaxWidth().padding(vertical = 8.dp, horizontal = 4.dp))\n                }\n            }\n        }\n    }\n    BasicText(\"Selected = ${options[selected]}\")\n}\n</code></pre>"},{"location":"#code-examples","title":"Code Examples","text":""},{"location":"#expandclose-the-menu-programmatically","title":"Expand/Close the Menu programmatically","text":"<p>Pass your own <code>MenuState</code> to the <code>Menu</code> and change the expanded property according to your needs:</p> <pre><code>val state = rememberMenuState(expanded = true)\n\nMenu(state = state) {\n    MenuButton {\n        BasicText(\"Toggle the menu\")\n    }\n\n    MenuContent {\n        MenuItem(onClick = { state.expanded = false }) {\n            BasicText(\"Close this menu\")\n        }\n    }\n}\n</code></pre>"},{"location":"#change-the-alignment-of-the-menucontent","title":"Change the alignment of the <code>MenuContent</code>","text":"<p>This option is useful if you want to left align, center align or right align the <code>MenuButton</code> and the <code>MenuContent</code> when expanded. </p> <pre><code>Menu {\n    MenuButton {\n        BasicText(\"Toggle the menu\")\n    }\n\n    MenuContent(alignment = Alignment.End) {\n        MenuItem(onClick = { /* TODO */ }) {\n            BasicText(\"Option\")\n        }\n    }\n}\n</code></pre>"},{"location":"#styling","title":"Styling","text":"<p>By default, the Menu component comes with no styling. This is by design as it is intended to be used as a building block for your own design system's menus.</p> <p>The <code>Menu</code> composable is used as an anchor point. Do not pass any styling to its <code>modifier</code>. Instead, use its <code>modifier</code> parameter for anchoring and positioning needs (such as <code>Modifier.align()</code>).</p> <p>The <code>MenuButton</code> is the composable responsible to handle clicking into showing and hiding the dropdown menu.</p> <p>The following sample shows the minimum setup you need to display something on the screen:</p> <pre><code>Menu {\n    MenuButton {\n        BasicText(\"Show Options\")\n    }\n\n    MenuContent {\n        MenuItem(onClick = { /* TODO handle click */ }) {\n            BasicText(\"Option 1\")\n        }\n        MenuItem(onClick = { /* TODO handle click */ }) {\n            BasicText(\"Option 2\")\n        }\n        MenuItem(onClick = { /* TODO handle click */ }) {\n            BasicText(\"Option 3\")\n        }\n    }\n}\n</code></pre> <p>However, the result will not look pretty. The following section goes over how to style each component to achieve the visual results you want.</p>"},{"location":"#styling-the-menu-button","title":"Styling the Menu Button","text":"<p>Pass the desired styling to the <code>MenuButton</code>'s <code>modifier</code>. Do not pass any padding to it, as the <code>MenuButton</code> handles click events internally and this will affect the interaction bounds.</p> <p>Instead, provide any content padding to the contents of the button instead:</p> <pre><code>Menu {\n    MenuButton(Modifier.clip(RoundedCornerShape(6.dp)).border(1.dp, Color(0xFFBDBDBD), RoundedCornerShape(6.dp))) {\n        BasicText(\"Options\", modifier = Modifier.padding(vertical = 8.dp, horizontal = 4.dp))\n    }\n\n    MenuContent {\n        MenuItem(onClick = { /* TODO handle click */ }) {\n            BasicText(\"Option 1\")\n        }\n        MenuItem(onClick = { /* TODO handle click */ }) {\n            BasicText(\"Option 2\")\n        }\n        MenuItem(onClick = { /* TODO handle click */ }) {\n            BasicText(\"Option 3\")\n        }\n    }\n}\n</code></pre>"},{"location":"#styling-the-menucontent","title":"Styling the MenuContent","text":"<p>The <code>MenuContent</code> component is a layout on which the menu's items will be displayed when the menu is expanded. In Material Design this is often a card.</p> <pre><code>Menu {\n    MenuButton(Modifier.clip(RoundedCornerShape(6.dp)).border(1.dp, Color(0xFFBDBDBD), RoundedCornerShape(6.dp))) {\n        BasicText(\"Options\", modifier = Modifier.padding(vertical = 8.dp, horizontal = 4.dp))\n    }\n\n    MenuContent(Modifier.width(320.dp).border(1.dp, Color(0xFFE0E0E0), RoundedCornerShape(4.dp)).background(Color.White).padding(4.dp)) {\n        MenuItem(onClick = { selected = index }) {\n            Text(option, modifier = Modifier.fillMaxWidth().padding(vertical = 8.dp, horizontal = 4.dp))\n        }\n    }\n}\n</code></pre>"},{"location":"#animating-the-menu","title":"Animating the Menu","text":"<p>Modify the <code>showTransition</code> and <code>hideTransition</code> parameters of the <code>MenuContent</code> component to modify the animation specs of the dropdown menu when it is visible/hidden.</p> <p>The <code>MenuContent</code> use the <code>AnimatedVisiblity</code> composable internally, which gives you a lot of flexibility towards what you can achieve.</p>"},{"location":"#animation-recipes","title":"Animation Recipes","text":""},{"location":"#material-design-dropdown-animation","title":"Material Design Dropdown Animation","text":"<p>Material Design scales and fades the dropdown in and out.</p> <pre><code>MenuContent(\n    modifier = Modifier.width(320.dp).border(1.dp, Color(0xFFE0E0E0), RoundedCornerShape(4.dp)).background(Color.White).padding(4.dp),\n    showTransition = scaleIn(tween(durationMillis = 120, easing = LinearOutSlowInEasing), initialScale = 0.8f, transformOrigin = TransformOrigin(0f, 0f)) + fadeIn(tween(durationMillis = 30)),\n    hideTransition = scaleOut(tween(durationMillis = 1, delayMillis = 75), targetScale = 1f) + fadeOut(tween(durationMillis = 75))\n) {\n    MenuItem(onClick = { /* TODO */ }) {\n        Basictext(\"Option 1\")\n    }\n    MenuItem(onClick = { /* TODO */ }) {\n        Basictext(\"Option 2\")\n    }\n}\n</code></pre>"},{"location":"#mac-os-menu-animations","title":"Mac OS Menu Animations","text":"<p>macOS shows the menu instantly on click, and quickly fades the menu out when dismissed:</p> <pre><code>MenuContent(hideTransition = fadeOut(tween(durationMillis = 100, easing = LinearEasing))) {\n    MenuItem(onClick = { /* TODO */ }) {\n        Basictext(\"Option 1\")\n    }\n}\n</code></pre>"},{"location":"#styling-touch-presses-and-focus","title":"Styling touch presses and focus","text":"<p><code>MenuItem</code>'s uses the default Compose mechanism for providing touch and focus feedback. Use the <code>LocalIndication</code> CompositionLocal to override the default indication.</p> <p>Here is an example of using Material Design's signature ripple feedback with your menu:</p> <pre><code>import androidx.compose.foundation.LocalIndication\nimport androidx.compose.material.ripple.rememberRipple\n\nCompositionLocalProvider(LocalIndication provides rememberRipple()) {\n    // MenuButton and MenuContent will use the ripple effect when focused and pressed\n\n    Menu {\n        // TODO implement the rest of the menu\n    }\n}\n</code></pre>"},{"location":"#keyboard-interactions","title":"Keyboard Interactions","text":"Key Description Enter Opens the Menu, if the <code>MenuButton</code> is focused. Performs a click, when a <code>MenuItem</code> is focused. \u2b07 Opens the Menu, if the <code>MenuButton</code> is focused. Moves focus to the next <code>MenuItem</code> if the <code>Menu</code> is expanded. \u2b06 Moves focus to the previous <code>MenuItem</code> if the <code>Menu</code> is expanded. Esc Closes the Menu, if the Menu is expanded and moves focus to the <code>MenuButton</code>. Removes focus if the <code>MenuButton</code> is focused."}]}